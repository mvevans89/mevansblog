<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>m.evans</title>
    <link>https://ditheringdata.netlify.com/</link>
    <description>Recent content on m.evans</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Michelle Evans</copyright>
    <lastBuildDate>Wed, 17 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://ditheringdata.netlify.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dummy Variables for Dummies</title>
      <link>https://ditheringdata.netlify.com/2021/02/17/dummy-variables-for-dummies/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/2021/02/17/dummy-variables-for-dummies/</guid>
      <description>As you may have guessed from the cliched title that I couldn’t resist, this post is about dummy variables. Specifically, comparing a couple of different ways to create them in R, and seeing which is fastest.
What are dummy variables? Dummy variables, sometimes called indicator variables, are a way to encode categorical variables as numerical (often binomial), so that we can model them in a regression. Luckily, R will often deal with creating these dummy variables under the hood when we use something like lm to model a regression, but this is not true for all methods.</description>
    </item>
    
    <item>
      <title>Accidentally repeating geom_text</title>
      <link>https://ditheringdata.netlify.com/2021/01/27/accidentally-repeating-geom_text/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/2021/01/27/accidentally-repeating-geom_text/</guid>
      <description>When adding labels or text to ggplot you may have run into a problem where it is either taking much longer than you expect to plot, crashing Rstudio while plotting, or creating blurry or jagged text/labels. This all stems from the same problem, which is that, if the labels are repeated n times in your dataset, they are being plotted n times. As it writes those text over and over again on top of itself, it 1) will take a long time and 2) will create blurry text.</description>
    </item>
    
    <item>
      <title>Extract spatial polygon values to points</title>
      <link>https://ditheringdata.netlify.com/2020/02/22/extract-data-from-spatial-polygons/</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/2020/02/22/extract-data-from-spatial-polygons/</guid>
      <description>If you work with spatial data, you are probably familiar with the extract function from the raster package, which extracts values from a RasterLayer or RasterStack to polygons or points. This is the type of function you may use when you want to know the elevation at a latitude/longitude value or the mean temperature within a county polygon.
This function only works when you value you want to extract is in a raster.</description>
    </item>
    
    <item>
      <title>Rolling functions along columns</title>
      <link>https://ditheringdata.netlify.com/2020/02/11/rolling-functions-along-columns/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/2020/02/11/rolling-functions-along-columns/</guid>
      <description>Rolling, or window, functions allow you to apply a function over a window of size n of a vector, such as a column in a dataframe. This is especially useful when you want to know the accumulation of some variable over time, like precipitation over the past month or the count of some occurrence in a surrounding number of days.
To follow this you’ll need the following packages:
library(RcppRoll) library(ggplot2); theme_set(theme_bw()) library(dplyr) I recently used rolling functions to deal with a data puzzle of my own.</description>
    </item>
    
    <item>
      <title>Your Packages Wrapped 2019</title>
      <link>https://ditheringdata.netlify.com/2019/12/20/package-wrapped/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/2019/12/20/package-wrapped/</guid>
      <description>As the the decade winds to a close, the internet abounds with various Best of the 2010’s or Best of 2019, from the best TV shows and movies to the best grocery store snacks. You can even get your own personalized ‘Best Of’ list of your most listened to songs and albums on Spotify. But let’s be honest, the majority of my time is not spent watching Award-winning TV, but trying to convince my computer to run that last bit of R code needed for my analysis.</description>
    </item>
    
    <item>
      <title>dplyr and ggplot pipe dreams</title>
      <link>https://ditheringdata.netlify.com/2018/06/15/dplyr-and-ggplot-pipe-dreams/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/2018/06/15/dplyr-and-ggplot-pipe-dreams/</guid>
      <description>I’ve been getting more and more immersed into using tidyverse packages as time goes on. Every now and then I have trouble getting something to work that I could do very quickly in base R, but that seems to be happening less and less as more SO questions use the tidyverse and documentation gets better and better.
Anyways, I am a little late to the party but I recently discovered that you can pipe directly from your dplyr calls into ggplot2, manipulating and plotting your data all at once.</description>
    </item>
    
    <item>
      <title>Ebola Outbreak in DRC 2018</title>
      <link>https://ditheringdata.netlify.com/2018/05/15/drc-ebola/</link>
      <pubDate>Tue, 15 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/2018/05/15/drc-ebola/</guid>
      <description>An outbreak of Ebola occurred in the Equator province of the Democratic Republic of Congo in April 2018. The WHO published its first Disease Outbreak News on the outbreak on May 10th and began efforts to conduct ring vaccination around the area. You can read more about it on the WHO’s website on the 2018 Ebola outbreak in the DRC.</description>
    </item>
    
    <item>
      <title>Battle Royal: sf vs. sp</title>
      <link>https://ditheringdata.netlify.com/2018/01/28/sf-vs-sp/</link>
      <pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/2018/01/28/sf-vs-sp/</guid>
      <description>I’ve recently made the jump from sp to sf for a lot of my simple spatial work. I’ll go into why in more detail below, but this was mostly because it plays so nicely with my tidy workflow. But I’ve also been wondering if I gain anything else from making the switch, or worse, if I’m losing out? My two main questions:
 Which is faster? Which one is better on my poor ol’ MacBook’s memory?</description>
    </item>
    
    <item>
      <title>Animating Maps with gganimate</title>
      <link>https://ditheringdata.netlify.com/2018/01/01/gganimate/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/2018/01/01/gganimate/</guid>
      <description>I’ve recently been working on a monthly yellow fever dataset from Brazil that spans fourteen years. Overall, there are over 5600 spatial units and 168 months (that’s nearly 1,000,000 rows of data for those of you keeping track). It is great to have access to so much data, but sometimes visualizing it can be a bit of a pain, especially when we are trying to look at patterns across time and space.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ditheringdata.netlify.com/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ditheringdata.netlify.com/page/about/</guid>
      <description>I&amp;rsquo;m a PhD student at the University of Georgia studying the ecology of mosquito-borne disease. I also like to play around with data, especially if it&amp;rsquo;s spatial. I started this blog as a way for myself to better my own coding practices, and share some things I&amp;rsquo;ve learned with others.
For more information about my research, head over to my personal website.
This blog was created using the blogdown package with the ghostwriter theme.</description>
    </item>
    
  </channel>
</rss>
